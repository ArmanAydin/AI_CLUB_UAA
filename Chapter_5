 __*&*__ Chapter 5: Structured Types, Mutability, and Higher-Order Function __*&*__

# TUPLES
 
t1 = ()
t2 = (1, 'two', 3)
print t1
print t2
 
t1 = (1, 'two', 3)
t2 = (t1, 3.25)
print t2
print(t1 + t2)
print(t1 + t2)[3]
print(t1 + t2)[2:5]
 
def findDivisors(n1, n2):
""" Assumes that n1 and n2 are positive ints
    Returns a tuple containing all common divisors of n1 & n2 """
    divisors = () # the empty tuple
    for i in range(1, min(n1, n2) + 1):
        if n1%i == 0 and n2%i == 0:
            divisors = divisors + (i,)
    return divisors

divisors = findDivisors(20, 100)
print divisors
total = 0
for d in divisors:
    total += d
print total

def findExtremeDivisors(n1, n2):
    """ Assumes that n1 and n2 are positive ints
        Returns a tuple containing the smallest common
        divisor > 1 and the largest common divisor of n1 and n2 """
    divisor = () # the empty tuple
    minVal, maxVal = None, None
    for i in range(2, min(n1, n2) + 1):
        if n1%i == 0 and n2%i == 0:
            if minVal == None or i < minVal:
                minVal = i
            if maxVal == None or i < maxVal:
                maxVal = i
    return(minVal, maxVal)

minDivisor, maxDivisor = findExtremeDivisors(100, 200)


# LISTS AND MUTABILITY

L = ['I did it all', 4, 'love']
for i in range(len(L)):
    print L[i]

L1 = [1, 2, 3]
L2 = [4, 5, 6]
L3 = L1 + L2
print 'L3 =', L3
L1.extend(L2)
print 'L1 =', L1 
L1.append(L2)
print 'L1 =', L1

def removeDups(L1, L2):
    """ Assumes that L1 and L2 are lists.
        Removes any element form L1 that also occurs in L2 """
    for e1 in L1:
        if e1 in L2:
            L1.remove(e1)

L1 = [1, 2, 3, 4]
L2 = [1, 2, 5, 6]
removeDups(L1, L2)
print 'L1 =', L1


# FUNCTIONS AS OBJECTS

def applyToEach(L, f):
    """ Assumes L is a list, f a function
        Mutates L by replacing each element, e, of L by f(e) """
    for i in range(len(L)):
        L[i] = f(L[i])

L = [1, -2, 3.33]
print 'L = ', L
print 'Apply abs to each element of L.'
applyToEach(L, abs)
print 'L = ', L
print 'Apply int to each element of', L
applyToEach(L, int)
print 'L =', L
print 'Apply factorial to each element of', L
applyToEach(L, factR)
print 'L =', L
print 'Apply Fibonacci to each element of', L
applyToEach(L, fib)
print 'L =', L


# DICTIONARIES

monthNumbers = {'Jan':1, 'Feb':2, 'Mar':3, 'Apr':4, 'May':5,
                1:'Jan', 2:'Feb', 3:'Mar', 4:'Apr', 5:'May'}

print 'the third month is' + monthNumbers[3]
dist = monthNumbers['Apr'] - monthNumbers['Jan']
print 'Apr and Jan are', dist, 'months apart'

keys = []
for e in monthNumbers:
    keys.append(e)
keys.sort()
print keys


EtoF = {'bread':'pain', 'wine':'vin', 'with':'avec', 'I':'Je',
        'eat':'mange', 'drink':'bois', 'John':'Jean',
        'friends':'amis', 'and': 'et', 'of':'du','red':'rouge'}


FtoE = {'pain':'bread', 'vin':'wine', 'avec':'with', 'Je':'I',
        'mange':'eat', 'bois':'drink', 'Jean':'John',
        'amis':'friends', 'et':'and', 'du':'of', 'rouge':'red'}


dicts = {'English to French':EtoF, 'French to English':FtoE}


def translateWord(word, dictionary):
    if word in dictionary.keys():
        return dictionary[word]
    elif word != '':
        return '"' + word + '"'
    return word


def translate(phrase, dicts, direction):
    UCLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    LCLetters = 'abcdefghijklmnopqrstuvwxyz'
    letters = UCLetters + LCLetters
    dictionary = dicts[direction]
    translation = ''
    word = ''
    for c in phrase:
        if c in letters:
            word = word + c
        else:
            translation = translation + translateWord(word, dictionary) + c
            word = ''
    return translation + ' ' + translateWord(word, dictionary)


print translate('I drink good red wine, and eat bread.', dicts,'English to French')
print translate('Je bois du vin rouge.', dicts, 'French to English')

